当<script>标签包含async属性时，浏览器会在该脚本文件并行下载的同时继续解析网页。一旦脚本下载完毕，浏览器会立即中断HTML的解析过程并执行该脚本，然后再继续解析HTML。

用于不依赖于其他脚本或DOM的脚本。
多个有async的脚本将按照下载完成的顺序执行，并不保证按照它们在页面上出现的顺序执行。
defer属性：
当<script>标签包含defer属性时，浏览器同样会并行下载脚本，但不会中断HTML的解析过程。所有具有defer的脚本会保证按照它们在HTML文档中出现的顺序执行，并且会等到HTML文档完全解析完毕后再执行。

通常用于需要等待DOM解析完成后才能执行的脚本。
对于依赖于其他脚本或DOM元素初始化的脚本非常有用。
两者的主要区别在于何时执行脚本：

async属性是说一旦脚本下载完毕，就会中断HTML解析来执行该脚本（对顺序没有保证）。
defer属性是说脚本会在HTML解析完成之后，且在DOMContentLoaded事件触发之前执行（保证按顺序执行）。

暂停HTML解析执行async脚本不会影响到load事件的触发，因为load事件表示的是整个页面加载的完成，不单单是HTML文档的解析过程。换句话说，load事件是
在整个页面的所有资源都下载并可以使用之后，浏览器安排的最后一个步骤。因此，在页面上的所有资源加载完毕后，无论是否有async脚本执行，load事件最终都会被触发。
所以async脚本一定会在load事件触发前加载完成，但不一定执行完成

在没有async或defer属性的情况下，默认行为是同步加载，并在下载脚本文件时阻塞HTML解析和渲染，这可能会导致页面加载性能的下降。

因此，在加载非必要阻塞渲染的外部JavaScript脚本时，通常建议使用async或defer。选择哪一个取决于脚本是否需要等待其他脚本，以及是否需要在HTML解
析完成后才执行。